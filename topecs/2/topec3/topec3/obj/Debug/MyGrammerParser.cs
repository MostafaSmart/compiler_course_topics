//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\SMART\Documents\Visual Studio 2012\Projects\topecs\topec3\topec3\MyGrammer.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace topec3 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class MyGrammerParser : Parser {
	public const int
		INT=1, ID=2, NUMBER=3, ASSIGNMENT=4, SIMI=5, COMA=6, WS=7, INVALID=8;
	public const int
		RULE_prog = 0, RULE_statement = 1, RULE_firstDecl = 2, RULE_decler2 = 3;
	public static readonly string[] ruleNames = {
		"prog", "statement", "firstDecl", "decler2"
	};

	private static readonly string[] _LiteralNames = {
		null, "'int'", null, null, "'='", "';'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INT", "ID", "NUMBER", "ASSIGNMENT", "SIMI", "COMA", "WS", "INVALID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MyGrammer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MyGrammerParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode SIMI() { return GetToken(MyGrammerParser.SIMI, 0); }
		public ITerminalNode Eof() { return GetToken(MyGrammerParser.Eof, 0); }
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_prog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8; statement();
			State = 9; Match(SIMI);
			State = 10; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public FirstDeclContext firstDecl() {
			return GetRuleContext<FirstDeclContext>(0);
		}
		public ITerminalNode[] COMA() { return GetTokens(MyGrammerParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(MyGrammerParser.COMA, i);
		}
		public Decler2Context[] decler2() {
			return GetRuleContexts<Decler2Context>();
		}
		public Decler2Context decler2(int i) {
			return GetRuleContext<Decler2Context>(i);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 12; firstDecl();
			State = 17;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMA) {
				{
				{
				State = 13; Match(COMA);
				State = 14; decler2();
				}
				}
				State = 19;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FirstDeclContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(MyGrammerParser.INT, 0); }
		public ITerminalNode ID() { return GetToken(MyGrammerParser.ID, 0); }
		public ITerminalNode ASSIGNMENT() { return GetToken(MyGrammerParser.ASSIGNMENT, 0); }
		public ITerminalNode NUMBER() { return GetToken(MyGrammerParser.NUMBER, 0); }
		public FirstDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_firstDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterFirstDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitFirstDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFirstDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FirstDeclContext firstDecl() {
		FirstDeclContext _localctx = new FirstDeclContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_firstDecl);
		try {
			State = 26;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 20; Match(INT);
				State = 21; Match(ID);
				State = 22; Match(ASSIGNMENT);
				State = 23; Match(NUMBER);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 24; Match(INT);
				State = 25; Match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decler2Context : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(MyGrammerParser.ID, 0); }
		public ITerminalNode ASSIGNMENT() { return GetToken(MyGrammerParser.ASSIGNMENT, 0); }
		public ITerminalNode NUMBER() { return GetToken(MyGrammerParser.NUMBER, 0); }
		public ITerminalNode INT() { return GetToken(MyGrammerParser.INT, 0); }
		public Decler2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decler2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterDecler2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitDecler2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecler2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Decler2Context decler2() {
		Decler2Context _localctx = new Decler2Context(_ctx, State);
		EnterRule(_localctx, 6, RULE_decler2);
		int _la;
		try {
			State = 38;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 29;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==INT) {
					{
					State = 28; Match(INT);
					}
				}

				State = 31; Match(ID);
				State = 32; Match(ASSIGNMENT);
				State = 33; Match(NUMBER);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 35;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==INT) {
					{
					State = 34; Match(INT);
					}
				}

				State = 37; Match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\n+\x4\x2\t\x2\x4"+
		"\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3"+
		"\x3\a\x3\x12\n\x3\f\x3\xE\x3\x15\v\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x5\x4\x1D\n\x4\x3\x5\x5\x5 \n\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5&\n"+
		"\x5\x3\x5\x5\x5)\n\x5\x3\x5\x2\x2\x2\x6\x2\x2\x4\x2\x6\x2\b\x2\x2\x2+"+
		"\x2\n\x3\x2\x2\x2\x4\xE\x3\x2\x2\x2\x6\x1C\x3\x2\x2\x2\b(\x3\x2\x2\x2"+
		"\n\v\x5\x4\x3\x2\v\f\a\a\x2\x2\f\r\a\x2\x2\x3\r\x3\x3\x2\x2\x2\xE\x13"+
		"\x5\x6\x4\x2\xF\x10\a\b\x2\x2\x10\x12\x5\b\x5\x2\x11\xF\x3\x2\x2\x2\x12"+
		"\x15\x3\x2\x2\x2\x13\x11\x3\x2\x2\x2\x13\x14\x3\x2\x2\x2\x14\x5\x3\x2"+
		"\x2\x2\x15\x13\x3\x2\x2\x2\x16\x17\a\x3\x2\x2\x17\x18\a\x4\x2\x2\x18\x19"+
		"\a\x6\x2\x2\x19\x1D\a\x5\x2\x2\x1A\x1B\a\x3\x2\x2\x1B\x1D\a\x4\x2\x2\x1C"+
		"\x16\x3\x2\x2\x2\x1C\x1A\x3\x2\x2\x2\x1D\a\x3\x2\x2\x2\x1E \a\x3\x2\x2"+
		"\x1F\x1E\x3\x2\x2\x2\x1F \x3\x2\x2\x2 !\x3\x2\x2\x2!\"\a\x4\x2\x2\"#\a"+
		"\x6\x2\x2#)\a\x5\x2\x2$&\a\x3\x2\x2%$\x3\x2\x2\x2%&\x3\x2\x2\x2&\'\x3"+
		"\x2\x2\x2\')\a\x4\x2\x2(\x1F\x3\x2\x2\x2(%\x3\x2\x2\x2)\t\x3\x2\x2\x2"+
		"\a\x13\x1C\x1F%(";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace topec3
