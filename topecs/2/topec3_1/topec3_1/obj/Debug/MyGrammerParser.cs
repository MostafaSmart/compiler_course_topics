//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\SMART\Documents\Visual Studio 2012\Projects\topecs\topec3_1\topec3_1\MyGrammer.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace topec3_1 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class MyGrammerParser : Parser {
	public const int
		INT=1, ID=2, NUMBER=3, ASSIGNMENT=4, PLUS=5, MINUS=6, MUL=7, DIV=8, LIFT=9, 
		RIGHT=10, SIMI=11, COMA=12, WS=13, INVALID=14;
	public const int
		RULE_prog = 0, RULE_statement = 1, RULE_firstDecl = 2, RULE_decler2 = 3, 
		RULE_expr = 4, RULE_term = 5, RULE_factor = 6;
	public static readonly string[] ruleNames = {
		"prog", "statement", "firstDecl", "decler2", "expr", "term", "factor"
	};

	private static readonly string[] _LiteralNames = {
		null, "'int'", null, null, "'='", "'+'", "'-'", "'*'", "'/'", "'('", "')'", 
		"';'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INT", "ID", "NUMBER", "ASSIGNMENT", "PLUS", "MINUS", "MUL", "DIV", 
		"LIFT", "RIGHT", "SIMI", "COMA", "WS", "INVALID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MyGrammer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MyGrammerParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode SIMI() { return GetToken(MyGrammerParser.SIMI, 0); }
		public ITerminalNode Eof() { return GetToken(MyGrammerParser.Eof, 0); }
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_prog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14; statement();
			State = 15; Match(SIMI);
			State = 16; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public FirstDeclContext firstDecl() {
			return GetRuleContext<FirstDeclContext>(0);
		}
		public ITerminalNode[] COMA() { return GetTokens(MyGrammerParser.COMA); }
		public ITerminalNode COMA(int i) {
			return GetToken(MyGrammerParser.COMA, i);
		}
		public Decler2Context[] decler2() {
			return GetRuleContexts<Decler2Context>();
		}
		public Decler2Context decler2(int i) {
			return GetRuleContext<Decler2Context>(i);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18; firstDecl();
			State = 23;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMA) {
				{
				{
				State = 19; Match(COMA);
				State = 20; decler2();
				}
				}
				State = 25;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FirstDeclContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(MyGrammerParser.INT, 0); }
		public ITerminalNode ID() { return GetToken(MyGrammerParser.ID, 0); }
		public ITerminalNode ASSIGNMENT() { return GetToken(MyGrammerParser.ASSIGNMENT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public FirstDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_firstDecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterFirstDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitFirstDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFirstDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FirstDeclContext firstDecl() {
		FirstDeclContext _localctx = new FirstDeclContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_firstDecl);
		try {
			State = 32;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 26; Match(INT);
				State = 27; Match(ID);
				State = 28; Match(ASSIGNMENT);
				State = 29; expr(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 30; Match(INT);
				State = 31; Match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Decler2Context : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(MyGrammerParser.ID, 0); }
		public ITerminalNode ASSIGNMENT() { return GetToken(MyGrammerParser.ASSIGNMENT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode INT() { return GetToken(MyGrammerParser.INT, 0); }
		public Decler2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decler2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterDecler2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitDecler2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecler2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Decler2Context decler2() {
		Decler2Context _localctx = new Decler2Context(_ctx, State);
		EnterRule(_localctx, 6, RULE_decler2);
		int _la;
		try {
			State = 44;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 35;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==INT) {
					{
					State = 34; Match(INT);
					}
				}

				State = 37; Match(ID);
				State = 38; Match(ASSIGNMENT);
				State = 39; expr(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 41;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==INT) {
					{
					State = 40; Match(INT);
					}
				}

				State = 43; Match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(MyGrammerParser.PLUS, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(MyGrammerParser.MINUS, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 47; term(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 57;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 55;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 49;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 50; Match(PLUS);
						State = 51; term(0);
						}
						break;

					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 52;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 53; Match(MINUS);
						State = 54; term(0);
						}
						break;
					}
					} 
				}
				State = 59;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode MUL() { return GetToken(MyGrammerParser.MUL, 0); }
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public ITerminalNode DIV() { return GetToken(MyGrammerParser.DIV, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		TermContext _localctx = new TermContext(_ctx, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 61; factor();
			}
			_ctx.stop = _input.Lt(-1);
			State = 71;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 69;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
					case 1:
						{
						_localctx = new TermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_term);
						State = 63;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 64; Match(MUL);
						State = 65; factor();
						}
						break;

					case 2:
						{
						_localctx = new TermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_term);
						State = 66;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 67; Match(DIV);
						State = 68; factor();
						}
						break;
					}
					} 
				}
				State = 73;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(MyGrammerParser.NUMBER, 0); }
		public ITerminalNode LIFT() { return GetToken(MyGrammerParser.LIFT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RIGHT() { return GetToken(MyGrammerParser.RIGHT, 0); }
		public ITerminalNode ID() { return GetToken(MyGrammerParser.ID, 0); }
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_factor);
		try {
			State = 80;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 74; Match(NUMBER);
				}
				break;
			case LIFT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 75; Match(LIFT);
				State = 76; expr(0);
				State = 77; Match(RIGHT);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 79; Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return expr_sempred((ExprContext)_localctx, predIndex);

		case 5: return term_sempred((TermContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 3);

		case 1: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 3);

		case 3: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x10U\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x3\x2\x3"+
		"\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\a\x3\x18\n\x3\f\x3\xE\x3\x1B\v\x3\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4#\n\x4\x3\x5\x5\x5&\n\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x5\x5,\n\x5\x3\x5\x5\x5/\n\x5\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6:\n\x6\f\x6\xE\x6=\v\x6\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\a\aH\n\a\f\a\xE\aK\v\a\x3\b\x3\b"+
		"\x3\b\x3\b\x3\b\x3\b\x5\bS\n\b\x3\b\x2\x2\x4\n\f\t\x2\x2\x4\x2\x6\x2\b"+
		"\x2\n\x2\f\x2\xE\x2\x2\x2X\x2\x10\x3\x2\x2\x2\x4\x14\x3\x2\x2\x2\x6\""+
		"\x3\x2\x2\x2\b.\x3\x2\x2\x2\n\x30\x3\x2\x2\x2\f>\x3\x2\x2\x2\xER\x3\x2"+
		"\x2\x2\x10\x11\x5\x4\x3\x2\x11\x12\a\r\x2\x2\x12\x13\a\x2\x2\x3\x13\x3"+
		"\x3\x2\x2\x2\x14\x19\x5\x6\x4\x2\x15\x16\a\xE\x2\x2\x16\x18\x5\b\x5\x2"+
		"\x17\x15\x3\x2\x2\x2\x18\x1B\x3\x2\x2\x2\x19\x17\x3\x2\x2\x2\x19\x1A\x3"+
		"\x2\x2\x2\x1A\x5\x3\x2\x2\x2\x1B\x19\x3\x2\x2\x2\x1C\x1D\a\x3\x2\x2\x1D"+
		"\x1E\a\x4\x2\x2\x1E\x1F\a\x6\x2\x2\x1F#\x5\n\x6\x2 !\a\x3\x2\x2!#\a\x4"+
		"\x2\x2\"\x1C\x3\x2\x2\x2\" \x3\x2\x2\x2#\a\x3\x2\x2\x2$&\a\x3\x2\x2%$"+
		"\x3\x2\x2\x2%&\x3\x2\x2\x2&\'\x3\x2\x2\x2\'(\a\x4\x2\x2()\a\x6\x2\x2)"+
		"/\x5\n\x6\x2*,\a\x3\x2\x2+*\x3\x2\x2\x2+,\x3\x2\x2\x2,-\x3\x2\x2\x2-/"+
		"\a\x4\x2\x2.%\x3\x2\x2\x2.+\x3\x2\x2\x2/\t\x3\x2\x2\x2\x30\x31\b\x6\x1"+
		"\x2\x31\x32\x5\f\a\x2\x32;\x3\x2\x2\x2\x33\x34\f\x5\x2\x2\x34\x35\a\a"+
		"\x2\x2\x35:\x5\f\a\x2\x36\x37\f\x4\x2\x2\x37\x38\a\b\x2\x2\x38:\x5\f\a"+
		"\x2\x39\x33\x3\x2\x2\x2\x39\x36\x3\x2\x2\x2:=\x3\x2\x2\x2;\x39\x3\x2\x2"+
		"\x2;<\x3\x2\x2\x2<\v\x3\x2\x2\x2=;\x3\x2\x2\x2>?\b\a\x1\x2?@\x5\xE\b\x2"+
		"@I\x3\x2\x2\x2\x41\x42\f\x5\x2\x2\x42\x43\a\t\x2\x2\x43H\x5\xE\b\x2\x44"+
		"\x45\f\x4\x2\x2\x45\x46\a\n\x2\x2\x46H\x5\xE\b\x2G\x41\x3\x2\x2\x2G\x44"+
		"\x3\x2\x2\x2HK\x3\x2\x2\x2IG\x3\x2\x2\x2IJ\x3\x2\x2\x2J\r\x3\x2\x2\x2"+
		"KI\x3\x2\x2\x2LS\a\x5\x2\x2MN\a\v\x2\x2NO\x5\n\x6\x2OP\a\f\x2\x2PS\x3"+
		"\x2\x2\x2QS\a\x4\x2\x2RL\x3\x2\x2\x2RM\x3\x2\x2\x2RQ\x3\x2\x2\x2S\xF\x3"+
		"\x2\x2\x2\f\x19\"%+.\x39;GIR";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace topec3_1
