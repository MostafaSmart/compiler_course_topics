//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\SMART\Documents\Visual Studio 2012\Projects\topecs\topec3_2\topec3_2\MyGrammer.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace topec3_2 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class MyGrammerParser : Parser {
	public const int
		STARTPROGRAM=1, ENDPROGRAM=2, INT=3, IF=4, PRINTT=5, ID=6, NUMBER=7, ASSIGNMENT=8, 
		LIFT=9, RIGHT=10, BEGIN=11, PLUS=12, MINUS=13, DIV=14, MUL=15, END=16, 
		SEMI=17, COMMA=18, GT=19, LT=20, WS=21, INVALID=22;
	public const int
		RULE_program = 0, RULE_declarlist = 1, RULE_ifStatement = 2, RULE_declar = 3, 
		RULE_declar2 = 4, RULE_condition = 5, RULE_statements = 6, RULE_prints = 7, 
		RULE_expr = 8, RULE_term = 9, RULE_factor = 10;
	public static readonly string[] ruleNames = {
		"program", "declarlist", "ifStatement", "declar", "declar2", "condition", 
		"statements", "prints", "expr", "term", "factor"
	};

	private static readonly string[] _LiteralNames = {
		null, "'StartP'", "'EndP'", "'int'", "'if'", "'print'", null, null, "'='", 
		"'('", "')'", "'{'", "'+'", "'-'", "'/'", "'*'", "'}'", "';'", "','", 
		"'>'", "'<'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "STARTPROGRAM", "ENDPROGRAM", "INT", "IF", "PRINTT", "ID", "NUMBER", 
		"ASSIGNMENT", "LIFT", "RIGHT", "BEGIN", "PLUS", "MINUS", "DIV", "MUL", 
		"END", "SEMI", "COMMA", "GT", "LT", "WS", "INVALID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MyGrammer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MyGrammerParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode STARTPROGRAM() { return GetToken(MyGrammerParser.STARTPROGRAM, 0); }
		public DeclarlistContext declarlist() {
			return GetRuleContext<DeclarlistContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ITerminalNode ENDPROGRAM() { return GetToken(MyGrammerParser.ENDPROGRAM, 0); }
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22; Match(STARTPROGRAM);
			State = 23; declarlist();
			State = 24; ifStatement();
			State = 25; Match(ENDPROGRAM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarlistContext : ParserRuleContext {
		public DeclarContext declar() {
			return GetRuleContext<DeclarContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(MyGrammerParser.SEMI, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(MyGrammerParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MyGrammerParser.COMMA, i);
		}
		public Declar2Context[] declar2() {
			return GetRuleContexts<Declar2Context>();
		}
		public Declar2Context declar2(int i) {
			return GetRuleContext<Declar2Context>(i);
		}
		public DeclarlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterDeclarlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitDeclarlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarlistContext declarlist() {
		DeclarlistContext _localctx = new DeclarlistContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_declarlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27; declar();
			State = 32;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 28; Match(COMMA);
				State = 29; declar2();
				}
				}
				State = 34;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 35; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(MyGrammerParser.IF, 0); }
		public ITerminalNode LIFT() { return GetToken(MyGrammerParser.LIFT, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode RIGHT() { return GetToken(MyGrammerParser.RIGHT, 0); }
		public ITerminalNode BEGIN() { return GetToken(MyGrammerParser.BEGIN, 0); }
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode END() { return GetToken(MyGrammerParser.END, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37; Match(IF);
			State = 38; Match(LIFT);
			State = 39; condition();
			State = 40; Match(RIGHT);
			State = 41; Match(BEGIN);
			State = 42; statements();
			State = 43; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(MyGrammerParser.INT, 0); }
		public ITerminalNode ID() { return GetToken(MyGrammerParser.ID, 0); }
		public ITerminalNode ASSIGNMENT() { return GetToken(MyGrammerParser.ASSIGNMENT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DeclarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterDeclar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitDeclar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarContext declar() {
		DeclarContext _localctx = new DeclarContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_declar);
		try {
			State = 51;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 45; Match(INT);
				State = 46; Match(ID);
				State = 47; Match(ASSIGNMENT);
				State = 48; expr(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 49; Match(INT);
				State = 50; Match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declar2Context : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(MyGrammerParser.ID, 0); }
		public ITerminalNode ASSIGNMENT() { return GetToken(MyGrammerParser.ASSIGNMENT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode INT() { return GetToken(MyGrammerParser.INT, 0); }
		public Declar2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declar2; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterDeclar2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitDeclar2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclar2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declar2Context declar2() {
		Declar2Context _localctx = new Declar2Context(_ctx, State);
		EnterRule(_localctx, 8, RULE_declar2);
		int _la;
		try {
			State = 63;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 54;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==INT) {
					{
					State = 53; Match(INT);
					}
				}

				State = 56; Match(ID);
				State = 57; Match(ASSIGNMENT);
				State = 58; expr(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 60;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==INT) {
					{
					State = 59; Match(INT);
					}
				}

				State = 62; Match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode GT() { return GetToken(MyGrammerParser.GT, 0); }
		public ITerminalNode LT() { return GetToken(MyGrammerParser.LT, 0); }
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_condition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65; expr(0);
			State = 66;
			_la = _input.La(1);
			if ( !(_la==GT || _la==LT) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 67; expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		public PrintsContext prints() {
			return GetRuleContext<PrintsContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(MyGrammerParser.SEMI, 0); }
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		StatementsContext _localctx = new StatementsContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_statements);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; prints();
			State = 70; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintsContext : ParserRuleContext {
		public ITerminalNode PRINTT() { return GetToken(MyGrammerParser.PRINTT, 0); }
		public ITerminalNode LIFT() { return GetToken(MyGrammerParser.LIFT, 0); }
		public ITerminalNode RIGHT() { return GetToken(MyGrammerParser.RIGHT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PrintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prints; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterPrints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitPrints(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintsContext prints() {
		PrintsContext _localctx = new PrintsContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_prints);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; Match(PRINTT);
			State = 73; Match(LIFT);
			{
			State = 74; expr(0);
			}
			State = 75; Match(RIGHT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(MyGrammerParser.PLUS, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(MyGrammerParser.MINUS, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 78; term(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 88;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 86;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 80;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 81; Match(PLUS);
						State = 82; term(0);
						}
						break;

					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 83;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 84; Match(MINUS);
						State = 85; term(0);
						}
						break;
					}
					} 
				}
				State = 90;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode MUL() { return GetToken(MyGrammerParser.MUL, 0); }
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public ITerminalNode DIV() { return GetToken(MyGrammerParser.DIV, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		TermContext _localctx = new TermContext(_ctx, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 92; factor();
			}
			_ctx.stop = _input.Lt(-1);
			State = 102;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 100;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
					case 1:
						{
						_localctx = new TermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_term);
						State = 94;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 95; Match(MUL);
						State = 96; factor();
						}
						break;

					case 2:
						{
						_localctx = new TermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_term);
						State = 97;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 98; Match(DIV);
						State = 99; factor();
						}
						break;
					}
					} 
				}
				State = 104;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(MyGrammerParser.NUMBER, 0); }
		public ITerminalNode LIFT() { return GetToken(MyGrammerParser.LIFT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RIGHT() { return GetToken(MyGrammerParser.RIGHT, 0); }
		public ITerminalNode ID() { return GetToken(MyGrammerParser.ID, 0); }
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_factor);
		try {
			State = 111;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 105; Match(NUMBER);
				}
				break;
			case LIFT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 106; Match(LIFT);
				State = 107; expr(0);
				State = 108; Match(RIGHT);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 110; Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return expr_sempred((ExprContext)_localctx, predIndex);

		case 9: return term_sempred((TermContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 3);

		case 1: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 3);

		case 3: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x18t\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3"+
		"\x3\x3\a\x3!\n\x3\f\x3\xE\x3$\v\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\x36"+
		"\n\x5\x3\x6\x5\x6\x39\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6?\n\x6\x3\x6\x5"+
		"\x6\x42\n\x6\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3"+
		"\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\a\nY\n\n\f\n\xE\n\\\v"+
		"\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\a\vg\n\v\f\v\xE\vj\v\v"+
		"\x3\f\x3\f\x3\f\x3\f\x3\f\x3\f\x5\fr\n\f\x3\f\x2\x2\x4\x12\x14\r\x2\x2"+
		"\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x2\x3\x3"+
		"\x2\x15\x16s\x2\x18\x3\x2\x2\x2\x4\x1D\x3\x2\x2\x2\x6\'\x3\x2\x2\x2\b"+
		"\x35\x3\x2\x2\x2\n\x41\x3\x2\x2\x2\f\x43\x3\x2\x2\x2\xEG\x3\x2\x2\x2\x10"+
		"J\x3\x2\x2\x2\x12O\x3\x2\x2\x2\x14]\x3\x2\x2\x2\x16q\x3\x2\x2\x2\x18\x19"+
		"\a\x3\x2\x2\x19\x1A\x5\x4\x3\x2\x1A\x1B\x5\x6\x4\x2\x1B\x1C\a\x4\x2\x2"+
		"\x1C\x3\x3\x2\x2\x2\x1D\"\x5\b\x5\x2\x1E\x1F\a\x14\x2\x2\x1F!\x5\n\x6"+
		"\x2 \x1E\x3\x2\x2\x2!$\x3\x2\x2\x2\" \x3\x2\x2\x2\"#\x3\x2\x2\x2#%\x3"+
		"\x2\x2\x2$\"\x3\x2\x2\x2%&\a\x13\x2\x2&\x5\x3\x2\x2\x2\'(\a\x6\x2\x2("+
		")\a\v\x2\x2)*\x5\f\a\x2*+\a\f\x2\x2+,\a\r\x2\x2,-\x5\xE\b\x2-.\a\x12\x2"+
		"\x2.\a\x3\x2\x2\x2/\x30\a\x5\x2\x2\x30\x31\a\b\x2\x2\x31\x32\a\n\x2\x2"+
		"\x32\x36\x5\x12\n\x2\x33\x34\a\x5\x2\x2\x34\x36\a\b\x2\x2\x35/\x3\x2\x2"+
		"\x2\x35\x33\x3\x2\x2\x2\x36\t\x3\x2\x2\x2\x37\x39\a\x5\x2\x2\x38\x37\x3"+
		"\x2\x2\x2\x38\x39\x3\x2\x2\x2\x39:\x3\x2\x2\x2:;\a\b\x2\x2;<\a\n\x2\x2"+
		"<\x42\x5\x12\n\x2=?\a\x5\x2\x2>=\x3\x2\x2\x2>?\x3\x2\x2\x2?@\x3\x2\x2"+
		"\x2@\x42\a\b\x2\x2\x41\x38\x3\x2\x2\x2\x41>\x3\x2\x2\x2\x42\v\x3\x2\x2"+
		"\x2\x43\x44\x5\x12\n\x2\x44\x45\t\x2\x2\x2\x45\x46\x5\x12\n\x2\x46\r\x3"+
		"\x2\x2\x2GH\x5\x10\t\x2HI\a\x13\x2\x2I\xF\x3\x2\x2\x2JK\a\a\x2\x2KL\a"+
		"\v\x2\x2LM\x5\x12\n\x2MN\a\f\x2\x2N\x11\x3\x2\x2\x2OP\b\n\x1\x2PQ\x5\x14"+
		"\v\x2QZ\x3\x2\x2\x2RS\f\x5\x2\x2ST\a\xE\x2\x2TY\x5\x14\v\x2UV\f\x4\x2"+
		"\x2VW\a\xF\x2\x2WY\x5\x14\v\x2XR\x3\x2\x2\x2XU\x3\x2\x2\x2Y\\\x3\x2\x2"+
		"\x2ZX\x3\x2\x2\x2Z[\x3\x2\x2\x2[\x13\x3\x2\x2\x2\\Z\x3\x2\x2\x2]^\b\v"+
		"\x1\x2^_\x5\x16\f\x2_h\x3\x2\x2\x2`\x61\f\x5\x2\x2\x61\x62\a\x11\x2\x2"+
		"\x62g\x5\x16\f\x2\x63\x64\f\x4\x2\x2\x64\x65\a\x10\x2\x2\x65g\x5\x16\f"+
		"\x2\x66`\x3\x2\x2\x2\x66\x63\x3\x2\x2\x2gj\x3\x2\x2\x2h\x66\x3\x2\x2\x2"+
		"hi\x3\x2\x2\x2i\x15\x3\x2\x2\x2jh\x3\x2\x2\x2kr\a\t\x2\x2lm\a\v\x2\x2"+
		"mn\x5\x12\n\x2no\a\f\x2\x2or\x3\x2\x2\x2pr\a\b\x2\x2qk\x3\x2\x2\x2ql\x3"+
		"\x2\x2\x2qp\x3\x2\x2\x2r\x17\x3\x2\x2\x2\f\"\x35\x38>\x41XZ\x66hq";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace topec3_2
