//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\SMART\Documents\Visual Studio 2012\Projects\topecs\topec3_2\topec3_2\MyGrammer.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace topec3_2 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class MyGrammarLexer : Lexer {
	public const int
		START=1, END=2, INT=3, ID=4, NUMBER=5, ASSIGNMENT=6, PLUS=7, MINUS=8, 
		MUL=9, DIV=10, LIFT=11, RIGHT=12, IF=13, BEGENIF=14, ENDIF=15, SIMI=16, 
		COMA=17, GT=18, WS=19, INVALID=20;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"START", "END", "INT", "ID", "NUMBER", "ASSIGNMENT", "PLUS", "MINUS", 
		"MUL", "DIV", "LIFT", "RIGHT", "IF", "BEGENIF", "ENDIF", "SIMI", "COMA", 
		"GT", "WS", "INVALID"
	};


	public MyGrammarLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'StartP'", "'EndP'", "'inte'", null, null, "'='", "'+'", "'-'", 
		"'*'", "'/'", "'('", "')'", "'if'", "'{'", "'}'", "';'", "','", "'>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "START", "END", "INT", "ID", "NUMBER", "ASSIGNMENT", "PLUS", "MINUS", 
		"MUL", "DIV", "LIFT", "RIGHT", "IF", "BEGENIF", "ENDIF", "SIMI", "COMA", 
		"GT", "WS", "INVALID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MyGrammer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x16l\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\a\x5?\n\x5\f\x5\xE\x5\x42"+
		"\v\x5\x3\x6\x6\x6\x45\n\x6\r\x6\xE\x6\x46\x3\a\x3\a\x3\b\x3\b\x3\t\x3"+
		"\t\x3\n\x3\n\x3\v\x3\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xF\x3"+
		"\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x6"+
		"\x14\x65\n\x14\r\x14\xE\x14\x66\x3\x14\x3\x14\x3\x15\x3\x15\x2\x2\x2\x16"+
		"\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13"+
		"\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2"+
		"\x12#\x2\x13%\x2\x14\'\x2\x15)\x2\x16\x3\x2\x6\x5\x2\x43\\\x61\x61\x63"+
		"|\x6\x2\x32;\x43\\\x61\x61\x63|\x3\x2\x32;\x5\x2\v\f\xF\xF\"\"n\x2\x3"+
		"\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2\x2\v"+
		"\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2\x2\x2\x2"+
		"\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19\x3\x2\x2"+
		"\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2"+
		"\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2"+
		"\x3+\x3\x2\x2\x2\x5\x32\x3\x2\x2\x2\a\x37\x3\x2\x2\x2\t<\x3\x2\x2\x2\v"+
		"\x44\x3\x2\x2\x2\rH\x3\x2\x2\x2\xFJ\x3\x2\x2\x2\x11L\x3\x2\x2\x2\x13N"+
		"\x3\x2\x2\x2\x15P\x3\x2\x2\x2\x17R\x3\x2\x2\x2\x19T\x3\x2\x2\x2\x1BV\x3"+
		"\x2\x2\x2\x1DY\x3\x2\x2\x2\x1F[\x3\x2\x2\x2!]\x3\x2\x2\x2#_\x3\x2\x2\x2"+
		"%\x61\x3\x2\x2\x2\'\x64\x3\x2\x2\x2)j\x3\x2\x2\x2+,\aU\x2\x2,-\av\x2\x2"+
		"-.\a\x63\x2\x2./\at\x2\x2/\x30\av\x2\x2\x30\x31\aR\x2\x2\x31\x4\x3\x2"+
		"\x2\x2\x32\x33\aG\x2\x2\x33\x34\ap\x2\x2\x34\x35\a\x66\x2\x2\x35\x36\a"+
		"R\x2\x2\x36\x6\x3\x2\x2\x2\x37\x38\ak\x2\x2\x38\x39\ap\x2\x2\x39:\av\x2"+
		"\x2:;\ag\x2\x2;\b\x3\x2\x2\x2<@\t\x2\x2\x2=?\t\x3\x2\x2>=\x3\x2\x2\x2"+
		"?\x42\x3\x2\x2\x2@>\x3\x2\x2\x2@\x41\x3\x2\x2\x2\x41\n\x3\x2\x2\x2\x42"+
		"@\x3\x2\x2\x2\x43\x45\t\x4\x2\x2\x44\x43\x3\x2\x2\x2\x45\x46\x3\x2\x2"+
		"\x2\x46\x44\x3\x2\x2\x2\x46G\x3\x2\x2\x2G\f\x3\x2\x2\x2HI\a?\x2\x2I\xE"+
		"\x3\x2\x2\x2JK\a-\x2\x2K\x10\x3\x2\x2\x2LM\a/\x2\x2M\x12\x3\x2\x2\x2N"+
		"O\a,\x2\x2O\x14\x3\x2\x2\x2PQ\a\x31\x2\x2Q\x16\x3\x2\x2\x2RS\a*\x2\x2"+
		"S\x18\x3\x2\x2\x2TU\a+\x2\x2U\x1A\x3\x2\x2\x2VW\ak\x2\x2WX\ah\x2\x2X\x1C"+
		"\x3\x2\x2\x2YZ\a}\x2\x2Z\x1E\x3\x2\x2\x2[\\\a\x7F\x2\x2\\ \x3\x2\x2\x2"+
		"]^\a=\x2\x2^\"\x3\x2\x2\x2_`\a.\x2\x2`$\x3\x2\x2\x2\x61\x62\a@\x2\x2\x62"+
		"&\x3\x2\x2\x2\x63\x65\t\x5\x2\x2\x64\x63\x3\x2\x2\x2\x65\x66\x3\x2\x2"+
		"\x2\x66\x64\x3\x2\x2\x2\x66g\x3\x2\x2\x2gh\x3\x2\x2\x2hi\b\x14\x2\x2i"+
		"(\x3\x2\x2\x2jk\v\x2\x2\x2k*\x3\x2\x2\x2\x6\x2@\x46\x66\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace topec3_2
