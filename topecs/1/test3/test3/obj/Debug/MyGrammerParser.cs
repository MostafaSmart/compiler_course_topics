//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\SMART\Documents\Visual Studio 2012\Projects\test3\test3\MyGrammer.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace test3 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class MyGrammerParser : Parser {
	public const int
		NUMBERS=1, PLUS=2, MINUS=3, DIV=4, MUL=5, LIFT=6, RIGHT=7, SIMI=8, WS=9, 
		INVALID=10;
	public const int
		RULE_prog = 0, RULE_expr = 1, RULE_term = 2, RULE_factor = 3;
	public static readonly string[] ruleNames = {
		"prog", "expr", "term", "factor"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'+'", "'-'", "'/'", "'*'", "'('", "')'", "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NUMBERS", "PLUS", "MINUS", "DIV", "MUL", "LIFT", "RIGHT", "SIMI", 
		"WS", "INVALID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MyGrammer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MyGrammerParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode SIMI() { return GetToken(MyGrammerParser.SIMI, 0); }
		public ITerminalNode Eof() { return GetToken(MyGrammerParser.Eof, 0); }
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_prog);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8; expr(0);
			State = 9; Match(SIMI);
			State = 10; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(MyGrammerParser.PLUS, 0); }
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(MyGrammerParser.MINUS, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 13; term(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 23;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 21;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,0,_ctx) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 15;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 16; Match(PLUS);
						State = 17; term(0);
						}
						break;

					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 18;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 19; Match(MINUS);
						State = 20; term(0);
						}
						break;
					}
					} 
				}
				State = 25;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ITerminalNode MUL() { return GetToken(MyGrammerParser.MUL, 0); }
		public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		public ITerminalNode DIV() { return GetToken(MyGrammerParser.DIV, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		return term(0);
	}

	private TermContext term(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		TermContext _localctx = new TermContext(_ctx, _parentState);
		TermContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_term, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 27; factor();
			}
			_ctx.stop = _input.Lt(-1);
			State = 37;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 35;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
					case 1:
						{
						_localctx = new TermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_term);
						State = 29;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 30; Match(MUL);
						State = 31; factor();
						}
						break;

					case 2:
						{
						_localctx = new TermContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_term);
						State = 32;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 33; Match(DIV);
						State = 34; factor();
						}
						break;
					}
					} 
				}
				State = 39;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public ITerminalNode NUMBERS() { return GetToken(MyGrammerParser.NUMBERS, 0); }
		public ITerminalNode LIFT() { return GetToken(MyGrammerParser.LIFT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RIGHT() { return GetToken(MyGrammerParser.RIGHT, 0); }
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyGrammerListener typedListener = listener as IMyGrammerListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMyGrammerVisitor<TResult> typedVisitor = visitor as IMyGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFactor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_factor);
		try {
			State = 45;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case NUMBERS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 40; Match(NUMBERS);
				}
				break;
			case LIFT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 41; Match(LIFT);
				State = 42; expr(0);
				State = 43; Match(RIGHT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expr_sempred((ExprContext)_localctx, predIndex);

		case 2: return term_sempred((TermContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 3);

		case 1: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool term_sempred(TermContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 3);

		case 3: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\f\x32\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\a\x3\x18\n\x3\f\x3\xE\x3\x1B"+
		"\v\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\a\x4&\n\x4"+
		"\f\x4\xE\x4)\v\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\x30\n\x5\x3\x5\x2"+
		"\x2\x4\x4\x6\x6\x2\x2\x4\x2\x6\x2\b\x2\x2\x2\x32\x2\n\x3\x2\x2\x2\x4\xE"+
		"\x3\x2\x2\x2\x6\x1C\x3\x2\x2\x2\b/\x3\x2\x2\x2\n\v\x5\x4\x3\x2\v\f\a\n"+
		"\x2\x2\f\r\a\x2\x2\x3\r\x3\x3\x2\x2\x2\xE\xF\b\x3\x1\x2\xF\x10\x5\x6\x4"+
		"\x2\x10\x19\x3\x2\x2\x2\x11\x12\f\x5\x2\x2\x12\x13\a\x4\x2\x2\x13\x18"+
		"\x5\x6\x4\x2\x14\x15\f\x4\x2\x2\x15\x16\a\x5\x2\x2\x16\x18\x5\x6\x4\x2"+
		"\x17\x11\x3\x2\x2\x2\x17\x14\x3\x2\x2\x2\x18\x1B\x3\x2\x2\x2\x19\x17\x3"+
		"\x2\x2\x2\x19\x1A\x3\x2\x2\x2\x1A\x5\x3\x2\x2\x2\x1B\x19\x3\x2\x2\x2\x1C"+
		"\x1D\b\x4\x1\x2\x1D\x1E\x5\b\x5\x2\x1E\'\x3\x2\x2\x2\x1F \f\x5\x2\x2 "+
		"!\a\a\x2\x2!&\x5\b\x5\x2\"#\f\x4\x2\x2#$\a\x6\x2\x2$&\x5\b\x5\x2%\x1F"+
		"\x3\x2\x2\x2%\"\x3\x2\x2\x2&)\x3\x2\x2\x2\'%\x3\x2\x2\x2\'(\x3\x2\x2\x2"+
		"(\a\x3\x2\x2\x2)\'\x3\x2\x2\x2*\x30\a\x3\x2\x2+,\a\b\x2\x2,-\x5\x4\x3"+
		"\x2-.\a\t\x2\x2.\x30\x3\x2\x2\x2/*\x3\x2\x2\x2/+\x3\x2\x2\x2\x30\t\x3"+
		"\x2\x2\x2\a\x17\x19%\'/";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace test3
